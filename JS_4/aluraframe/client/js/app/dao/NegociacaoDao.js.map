{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;IAAMA,a;AACF,2BAAYC,UAAZ,EAAuB;AAAA;;AACnB,aAAKC,WAAL,GAAmBD,UAAnB;AACA,aAAKE,MAAL,GAAc,aAAd,CAFmB,CAES;AAC/B;;;;iCAEQC,U,EAAY;AAAA;;AACjB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAAE;AACtC;;AAEA;AACA,oBAAIC,UAAU,MAAKN,WAAL,CACTO,WADS,CACG,CAAC,MAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,MAAKP,MAFR,EAGTQ,GAHS,CAGLP,UAHK,CAAd;;AAKA;AACAI,wBAAQI,SAAR,GAAoB;AAAA,2BAAKN,SAAL;AAAA,iBAApB,CAVoC,CAUD;;AAEnCE,wBAAQK,OAAR,GAAkB,aAAK;AAAE;AACrBC,4BAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB,EADmB,CACS;AAC5BX,2BAAO,yCAAP,EAFmB,CAE+B;AACrD,iBAHD;AAIH,aAhBM,CAAP;AAiBH;;;qCAEW;AAAA;;AACR,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA,oBAAIY,SAAS,OAAKjB,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACmB,WADnB,EAERO,WAFQ,CAEI,OAAKP,MAFT,EAGRiB,UAHQ,EAAb;;AAKA,oBAAIC,cAAc,EAAlB;;AAEAF,uBAAOP,SAAP,GAAmB,aAAK;AAAE;AACtB,wBAAIU,QAAQN,EAAEC,MAAF,CAASM,MAArB,CADoB,CACQ;;AAE5B,wBAAGD,KAAH,EAAS;AAAE;AACP,4BAAIE,OAAOF,MAAMG,KAAjB,CADK,CACkB;;AAEvB;AACAJ,oCAAYK,IAAZ,CAAiB,IAAIC,UAAJ,CAAeH,KAAKI,KAApB,EAA2BJ,KAAKK,WAAhC,EAA6CL,KAAKM,MAAlD,CAAjB;;AAEA;AACAR,8BAAMS,QAAN;AACH,qBARD,MAQO;AACHzB,gCAAQe,WAAR,EAZgB,CAYK;AAC5B,iBAbD;;AAeAF,uBAAON,OAAP,GAAiB,aAAK;AAClBC,4BAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,2BAAO,wCAAP;AACH,iBAHD;AAIH,aA5BM,CAAP;AA6BH;;;qCAEW;AAAA;;AACR,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA,oBAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAGT6B,KAHS,EAAd;;AAKAxB,wBAAQI,SAAR,GAAoB;AAAA,2BAAKN,QAAQ,kCAAR,CAAL;AAAA,iBAApB;;AAEAE,wBAAQK,OAAR,GAAkB,aAAK;AACnBC,4BAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,2BAAO,wCAAP;AACH,iBAHD;AAIH,aAbM,CAAP;AAcH","file":"NegociacaoDao.js","sourcesContent":["class NegociacaoDao{\n    constructor(connection){\n        this._connection = connection\n        this._store = 'negociacoes' //Definindo em qual ObjectStore esse DAO vai operar\n    }\n\n    adiciona(negociacao) {\n        return new Promise((resolve, reject) => { //A função adiconar retorna uma promise\n            //Toda vez que for gravar dados no banco, deve ser feito uma transação\n\n            //Fazendo uma transação para um determinado ObjectStore, do tipo ler e escrever, 'readwrite', solicitando acesso a ela, adicionando a negocicao recebida por parametro dentro da ObjectStore e passando para variavel request o valor da inserção se foi success ou erro\n            let request = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .add(negociacao)\n\n            //Se a adição de dados na ObjectStore der certo, faça\n            request.onsuccess = e => resolve() //Enviando o resolve na promise, informando que ela \"Cumpriu o que prometeu\"\n\n            request.onerror = e => { //Se a adição der errado, retorne o erro\n                console.log(e.target.error) //Imprimindo o erro no console\n                reject(\"Não foi possível adicionar a negociação\") //Retornando para o reject uma mensagem, para dizer que \"Não foi possível cumprir a promesa\"\n            }\n        })\n    }\n\n    listaTodos(){\n        return new Promise((resolve, reject) => {\n            //Fazendo a transação para ter acesso ao ObjectStore, acessando o ObjectStore e criando um cursor para agir como um ponteiro, apontando todos os itens\n            let cursor = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .openCursor()\n\n            let negociacoes = []\n\n            cursor.onsuccess = e => { //Se o cursor for criado com sucesso, faça\n                let atual = e.target.result //atual recebe os dados que o cursor ta apontando naquele momento\n\n                if(atual){ //Se existem dados apontados pelo cursor, faça\n                    let dado = atual.value //Passando para dado os valores apontados pelo ponteiro\n\n                    //Inserindo no array os dados como uma nova Negociacao\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor))\n\n                    //Fazendo com que o cursor chame a função 'onsuccess' de novo, mas desta vez com o ponteiro apontando para o proximo item\n                    atual.continue()\n                } else //Se não tiver dados para listar, ou tiver listado todos, faça\n                    resolve(negociacoes) //Passando para resolve o array com os dados das negociacoes\n            }\n\n            cursor.onerror = e => {\n                console.log(e.target.error)\n                reject(\"Não foi possível listar as negociações\")\n            }\n        })\n    }\n\n    apagaTodos(){\n        return new Promise((resolve, reject) => {\n            //Fazendo a transação para ter acesso ao ObjectStore, acessando o ObjectStore e eecutando um método clear, onde irá retornar uma requisição\n            let request = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .clear()\n\n            request.onsuccess = e => resolve(\"Negociações apagadas com sucesso\")\n\n            request.onerror = e => {\n                console.log(e.target.error)\n                reject(\"Não foi possível apagar as negociações\")\n            }\n        })\n    }\n}"]}