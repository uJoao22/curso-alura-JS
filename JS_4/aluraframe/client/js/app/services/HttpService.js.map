{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","res","ok","Error","statusTexxt","url","fetch","then","_handleErros","json"],"mappings":";;;;;;;;;;IAAaA,W,WAAAA,W;;;;;;;qCACIC,G,EAAI;AACb,gBAAG,CAACA,IAAIC,EAAR,EAAY,MAAM,IAAIC,KAAJ,CAAUF,IAAIG,WAAd,CAAN,CADC,CACgC;AAC7C,mBAAOH,GAAP,CAFa,CAEF;AACd;;;4BAEGI,G,EAAK;AAAA;;AACL;AACA,mBAAOC,MAAMD,GAAN,EACFE,IADE,CACG;AAAA,uBAAO,MAAKC,YAAL,CAAkBP,GAAlB,CAAP;AAAA,aADH,EACkC;AADlC,aAEFM,IAFE,CAEG;AAAA,uBAAON,IAAIQ,IAAJ,EAAP;AAAA,aAFH,CAAP,CAFK,CAIwB;;;AAG7B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACH","file":"HttpService.js","sourcesContent":["export class HttpService{\n    _handleErros(res){\n        if(!res.ok) throw new Error(res.statusTexxt) //Se der algum erro, ele irá lançar o erro\n        return res //Se estiver tudo ok ele retornar res\n    }\n\n    get(url) {\n        //Simplificando a requisição de dados usando Fetch API, recurso do ES2016\n        return fetch(url)\n            .then(res => this._handleErros(res)) //Chamando o metodo para tratar erros, se estive ok, siga\n            .then(res => res.json()) //Após tratamento de erros, retorne a resposta em formato JSON\n\n\n        // return new Promise((resolve, reject) => {\n        //     let xhr = new XMLHttpRequest()\n\n        //     xhr.open('GET', url)\n\n        //     xhr.onreadystatechange = () => {\n        //         if(xhr.readyState == 4){\n        //             if(xhr.status == 200){\n        //                 resolve(JSON.parse(xhr.responseText))\n        //             } else {\n        //                 reject(xhr.responseText)\n        //             }\n        //         }\n        //     }\n\n        //     xhr.send()\n        // })\n    }\n}"]}